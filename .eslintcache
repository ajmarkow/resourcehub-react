[{"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\index.js":"1","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\App.js":"2","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\reportWebVitals.js":"3","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\Routes.js":"4","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Home.js":"5","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NotFound.js":"6","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\config.js":"7","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Login.js":"8","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\contextLib.js":"9","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\components\\LoaderButton.js":"10","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\errorLib.js":"11","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\hooksLib.js":"12","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Signup.js":"13","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NewPost.js":"14","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\awsLib.js":"15","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Posts.js":"16","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\LandingPage.js":"17"},{"size":1230,"mtime":1612814656478,"results":"18","hashOfConfig":"19"},{"size":3729,"mtime":1612810874771,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":960,"mtime":1612812016557,"results":"22","hashOfConfig":"19"},{"size":4449,"mtime":1612809742700,"results":"23","hashOfConfig":"19"},{"size":240,"mtime":1612304505887,"results":"24","hashOfConfig":"19"},{"size":525,"mtime":1612397251780,"results":"25","hashOfConfig":"19"},{"size":1985,"mtime":1612570511382,"results":"26","hashOfConfig":"19"},{"size":174,"mtime":1612373984174,"results":"27","hashOfConfig":"19"},{"size":513,"mtime":1612387447094,"results":"28","hashOfConfig":"19"},{"size":201,"mtime":1612387695590,"results":"29","hashOfConfig":"19"},{"size":583,"mtime":1612546236367,"results":"30","hashOfConfig":"19"},{"size":3902,"mtime":1612388939367,"results":"31","hashOfConfig":"19"},{"size":6071,"mtime":1612812595658,"results":"32","hashOfConfig":"19"},{"size":255,"mtime":1612466156835,"results":"33","hashOfConfig":"19"},{"size":8215,"mtime":1612563990082,"results":"34","hashOfConfig":"19"},{"size":3958,"mtime":1612814810470,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2c9557",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\index.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\App.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\reportWebVitals.js",[],["73","74"],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\Routes.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Home.js",["75","76","77","78","79"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useAppContext } from \"../libs/contextLib\";\r\nimport { onError } from \"../libs/errorLib\";\r\nimport \"./Home.css\";\r\nimport { API } from \"aws-amplify\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { BsFileEarmarkPlus } from \"react-icons/bs\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport { s3Upload } from\"../libs/awsLib\";\r\n\r\nexport default function Home() {\r\n  const file = useRef(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [allPosts, setAllPosts] = useState([]);\r\n  const { isAuthenticated } = useAppContext();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function onLoad() {\r\n      if (!isAuthenticated) {\r\n        // try {\r\n        //   const posts = await loadAllPosts();\r\n        //   setAllPosts(posts);\r\n        // } catch (e) {\r\n        //   onError(e);\r\n        // }\r\n        return;\r\n      }\r\n      try {\r\n        const posts = await loadPosts();\r\n        \r\n        if (posts.attachment) {\r\n          posts.attachment = await Storage.vault.get(posts.attachment);\r\n        }\r\n        \r\n        setPosts(posts);\r\n      } catch (e) {\r\n        onError(e);\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n    onLoad();\r\n  }, [isAuthenticated]);\r\n\r\n  function loadPosts() {\r\n    return API.get(\"posts\", \"/posts\");\r\n  }\r\n\r\n  function loadAllPosts() {\r\n    return API.get(\"posts\", \"/posts/all\");\r\n  }\r\n\r\n  function formatFilename(str) {\r\n    return str.replace(/^\\w+-/, \"\");\r\n  }\r\n\r\n  function renderPostsList(posts) {\r\n    return (\r\n      <div>\r\n        <LinkContainer to=\"/posts/new\">\r\n          <ListGroup.Item action className=\"py-1 text-nowrap text-truncate\">\r\n            <BsFileEarmarkPlus size={17} />\r\n            <span className=\"ml-2 font-weight-bold\">Create new post</span>\r\n          </ListGroup.Item>\r\n        </LinkContainer>\r\n        {posts.map(\r\n          ({\r\n            postId,\r\n            postBlurb,\r\n            postLink,\r\n            postKeywords,\r\n            postLanguage,\r\n            postRating,\r\n            attachment,\r\n            createdAt,\r\n          }) => (\r\n            <LinkContainer key={postId} to={`/posts/${postId}`}>\r\n              <ListGroup.Item action>\r\n                <span className=\"font-weight-bold\">\r\n                  {postBlurb.trim().split(\"\\n\")[0]}\r\n                  <br></br>\r\n                  <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {postLink.trim().split(\"\\n\")[0]}\r\n                  </a>\r\n                  <br></br>\r\n                </span>\r\n                <span className=\"text-muted\">\r\n                  Language: {postLanguage}\r\n                  <br></br>\r\n                  Tags: {postKeywords}\r\n                  <br></br>\r\n                  Rating:\r\n                  <br />\r\n                  <StarRatingComponent\r\n                    name={postId}\r\n                    editing={false}\r\n                    renderStarIcon={() => <span>‚≠ê</span>}\r\n                    starCount={postRating}\r\n                  />\r\n                  {/* <p>Attachment: <a target=\"_blank\" rel=\"noopener noreferrer\" href={posts.attachment}>{(attachment === 'null') ? \"No File Uploaded\":formatFilename(attachment)}</a></p> */}\r\n                </span>\r\n                <br />\r\n                <p>Posted at: {new Date(createdAt).toLocaleString([], {year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit'})}</p>\r\n              </ListGroup.Item>\r\n            </LinkContainer>\r\n          )\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderLander() {\r\n    console.log(allPosts);\r\n    return (\r\n      <div className=\"lander\">\r\n        <h1>Resource Hub</h1>\r\n        <p className=\"text-muted\">\r\n          A place to share helpful information for developers.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderPosts() {\r\n    return (\r\n      <div className=\"posts pb-5 mt-4 mb-3\">\r\n        <ListGroup>{!isLoading && renderPostsList(posts)}</ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"lander\">\r\n        <h1 className=\"font-weight-bold pb-3 mt-4 mb-3\">Your Posts</h1>\r\n        <div className=\"d-block justify-content-center\">\r\n          {isAuthenticated ? renderPosts() : renderLander()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NotFound.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\config.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Login.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\contextLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\components\\LoaderButton.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\errorLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\hooksLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Signup.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NewPost.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\awsLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Posts.js",["80"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport { onError } from \"../libs/errorLib\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport config from \"../config\";\r\nimport LoaderButton from \"../components/LoaderButton\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { s3Upload } from \"../libs/awsLib\";\r\n\r\nexport default function Posts() {\r\n  const file = useRef(null);\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const [post, setPost] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  \r\n  useEffect(() => {\r\n    function loadPost() {\r\n      return API.get(\"posts\", `/posts/${id}`);\r\n    }\r\n\r\n    async function onLoad() {\r\n      try {\r\n        const post = await loadPost();\r\n        console.log(post);\r\n        const {\r\n          attachment,\r\n        } = post;\r\n\r\n        if (attachment) {\r\n          post.attachmentURL = await Storage.vault.get(attachment);\r\n        }\r\n        \r\n        setPost(post);\r\n      } catch (e) {\r\n        onError(e);\r\n      }\r\n    }\r\n    console.log(post);\r\n    onLoad();\r\n  }, [id]);\r\n\r\n\r\n  function validateForm() {\r\n    return post.length > 0;\r\n  }\r\n\r\n  function savePost(post) {\r\n    return API.put(\"posts\", `/posts/${id}`, {\r\n      body: post\r\n    });\r\n  }\r\n  function formatFilename(str) {\r\n    if (str != null) {\r\n      return str.replace(/^\\w+-/, \"\");\r\n  }\r\n  }\r\n\r\n  function handleFileChange(event) {\r\n    file.current = event.target.files[0];\r\n  }\r\n\r\n  async function handleFormSubmit(data, event) {\r\n    let attachment;\r\n    event.preventDefault();\r\n\r\n    if (file.current && file.current.size > config.MAX_ATTACHMENT_SIZE) {\r\n      alert(\r\n        `Please pick a file smaller than ${\r\n          config.MAX_ATTACHMENT_SIZE / 1000000\r\n        } MB.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      if (file.current) {\r\n        attachment = await s3Upload(file.current);\r\n      }\r\n      await savePost({\r\n        postBlurb: data.postBlurb,\r\n        postLink: data.postLink,\r\n        postLanguage: data.postLanguage,\r\n        postKeywords: data.postKeywords,\r\n        postRating: data.postRating,\r\n        attachment: attachment || post.attachment,\r\n      });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      onError(e);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  function deletePost() {\r\n    return API.del(\"posts\", `/posts/${id}`);\r\n  }\r\n\r\n  async function handleDelete(event) {\r\n    event.preventDefault();\r\n\r\n    const confirmed = window.confirm(\r\n      \"Are you sure you want to delete this note?\"\r\n    );\r\n\r\n    if (!confirmed) {\r\n      return;\r\n    }\r\n\r\n    setIsDeleting(true);\r\n\r\n    try {\r\n      await deletePost();\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      onError(e);\r\n      setIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"posts\">\r\n        (\r\n          <div>\r\n            <Card bg=\"dark\" style={{ width: \"80%\" }} className=\"p-5 NewPost\">\r\n              <div className=\"NewPost\">\r\n                <Form onSubmit={handleSubmit(handleFormSubmit)}>\r\n                  <Form.Group controlId=\"PostBlurb\">\r\n                    <Form.Label className=\"labels\">\r\n                      Describe the Content\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                    as=\"textarea\"\r\n                    onChange={(e) => setPost(e.target.value)}\r\n                    ref={register({ required: true })}\r\n                    name=\"postBlurb\"\r\n                    value={ post.postBlurb}\r\n                    />\r\n                    {errors.blurb && errors.blurb.type === \"required\" && (\r\n                      <span className=\"noto\" role=\"alert\">\r\n                        This is required\r\n                      </span>\r\n                    )}\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"PostLink\">\r\n                    <Form.Label className=\"labels\">Post Link</Form.Label>\r\n                    <Form.Control\r\n                      value={post.postLink}\r\n                      type=\"text\"\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                      ref={register({ required: true })}\r\n                      name=\"postLink\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"postLanguage\">\r\n                    <Form.Label className=\"labels\">\r\n                      What programming language?\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      value={post.postLanguage}\r\n                      type=\"text\"\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                      ref={register({ required: true })}\r\n                      name=\"postLanguage\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"postKeywords\">\r\n                    <Form.Label className=\"labels\">Any Keywords?</Form.Label>\r\n                    <Form.Control\r\n                      as=\"select\"\r\n                      multiple\r\n                      name=\"postKeywords\"\r\n                      size=\"3\"\r\n                      ref={register}\r\n                      value={post.postKeywords}\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                    >\r\n                      <option value=\"Tutorial\">Tutorial</option>\r\n                      <option value=\"Blog Post\">Blog Post</option>\r\n                      <option value=\"Youtube Video\">Youtube Video</option>\r\n                      <option value=\"Podcast\">Podcast</option>\r\n                      <option value=\"Documentation\">Documentation</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"postRating\">\r\n                    <Form.Label className=\"labels\">\r\n                      Rate it, 1 to 5 Stars.\r\n                    </Form.Label>\r\n                    <br></br>\r\n                    <Form.Control\r\n                      as=\"select\"\r\n                      id=\"rating\"\r\n                      name=\"postRating\"\r\n                      size=\"3\"\r\n                      ref={register}\r\n                      value={post.postRating}\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                    >\r\n                      <option value=\"1\">1</option>\r\n                      <option value=\"2\">2</option>\r\n                      <option value=\"3\">3</option>\r\n                      <option value=\"4\">4</option>\r\n                      <option value=\"5\">5</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"file\">\r\n                    <Form.Label>Attachment</Form.Label>\r\n                    {post.attachment && (\r\n                      <p>\r\n                        <a\r\n                          target=\"_blank\"\r\n                          rel=\"noopener noreferrer\"\r\n                          href={post.attachmentURL}\r\n                        >\r\n                          {formatFilename(post.attachment)}\r\n                        </a>\r\n                      </p>\r\n                    )}\r\n                    <Form.Control onChange={handleFileChange} type=\"file\" />\r\n                  </Form.Group>\r\n                  <LoaderButton\r\n                    block\r\n                    type=\"submit\"\r\n                    size=\"lg\"\r\n                    variant=\"primary\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateForm()}\r\n                  >\r\n                    Share it\r\n                  </LoaderButton>\r\n                </Form>\r\n              </div>\r\n            </Card>\r\n            <LoaderButton\r\n              size=\"lg\"\r\n              variant=\"danger\"\r\n              onClick={handleDelete}\r\n              isLoading={isDeleting}\r\n            >\r\n              Delete\r\n            </LoaderButton>\r\n          </div>\r\n        )\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\LandingPage.js",["81","82","83","84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":10,"column":10,"nodeType":"92","messageId":"93","endLine":10,"endColumn":18},{"ruleId":"90","severity":1,"message":"94","line":13,"column":9,"nodeType":"92","messageId":"93","endLine":13,"endColumn":13},{"ruleId":"90","severity":1,"message":"95","line":15,"column":20,"nodeType":"92","messageId":"93","endLine":15,"endColumn":31},{"ruleId":"90","severity":1,"message":"96","line":50,"column":12,"nodeType":"92","messageId":"93","endLine":50,"endColumn":24},{"ruleId":"90","severity":1,"message":"97","line":54,"column":12,"nodeType":"92","messageId":"93","endLine":54,"endColumn":26},{"ruleId":"98","severity":1,"message":"99","line":46,"column":6,"nodeType":"100","endLine":46,"endColumn":10,"suggestions":"101"},{"ruleId":"90","severity":1,"message":"102","line":7,"column":10,"nodeType":"92","messageId":"93","endLine":7,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":17,"column":85,"nodeType":"105","messageId":"106","endLine":17,"endColumn":86,"suggestions":"107"},{"ruleId":"103","severity":1,"message":"108","line":17,"column":87,"nodeType":"105","messageId":"106","endLine":17,"endColumn":88,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":20,"column":34,"nodeType":"112","messageId":"113","endLine":20,"endColumn":36},{"ruleId":"90","severity":1,"message":"114","line":27,"column":11,"nodeType":"92","messageId":"93","endLine":27,"endColumn":26},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'s3Upload' is defined but never used.","Identifier","unusedVar","'file' is assigned a value but never used.","'setAllPosts' is assigned a value but never used.","'loadAllPosts' is defined but never used.","'formatFilename' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'post'. Either include it or remove the dependency array.","ArrayExpression",["117"],"'LinkContainer' is defined but never used.","no-useless-escape","Unnecessary escape character: \\&.","Literal","unnecessaryEscape",["118","119"],"Unnecessary escape character: \\?.",["120","121"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isAuthenticated' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"messageId":"124","fix":"125","desc":"126"},{"messageId":"127","fix":"128","desc":"129"},{"messageId":"124","fix":"130","desc":"126"},{"messageId":"127","fix":"131","desc":"129"},"Update the dependencies array to be: [id, post]",{"range":"132","text":"133"},"removeEscape",{"range":"134","text":"135"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"136","text":"137"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"138","text":"135"},{"range":"139","text":"137"},[1337,1341],"[id, post]",[638,639],"",[638,638],"\\",[640,641],[640,640]]