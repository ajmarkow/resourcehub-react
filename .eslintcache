[{"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\index.js":"1","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\App.js":"2","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\reportWebVitals.js":"3","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\Routes.js":"4","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Home.js":"5","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NotFound.js":"6","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\config.js":"7","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Login.js":"8","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\contextLib.js":"9","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\components\\LoaderButton.js":"10","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\errorLib.js":"11","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\hooksLib.js":"12","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Signup.js":"13","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NewPost.js":"14","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\awsLib.js":"15","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Posts.js":"16","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\LandingPage.js":"17","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Donate.js":"18","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\components\\BillingForm.js":"19","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\index.js":"20","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\App.js":"21","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\reportWebVitals.js":"22","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\config.js":"23","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\Routes.js":"24","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\contextLib.js":"25","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\errorLib.js":"26","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Home.js":"27","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\NotFound.js":"28","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Login.js":"29","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Signup.js":"30","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Posts.js":"31","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\LandingPage.js":"32","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\NewPost.js":"33","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Donate.js":"34","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\awsLib.js":"35","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\hooksLib.js":"36","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\components\\LoaderButton.js":"37","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\components\\BillingForm.js":"38"},{"size":1230,"mtime":1612814656478,"results":"39","hashOfConfig":"40"},{"size":4178,"mtime":1612892448042,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"40"},{"size":1077,"mtime":1612821135490,"results":"43","hashOfConfig":"40"},{"size":6245,"mtime":1612894803443,"results":"44","hashOfConfig":"40"},{"size":240,"mtime":1612304505887,"results":"45","hashOfConfig":"40"},{"size":656,"mtime":1612823947367,"results":"46","hashOfConfig":"40"},{"size":1985,"mtime":1612570511382,"results":"47","hashOfConfig":"40"},{"size":174,"mtime":1612373984174,"results":"48","hashOfConfig":"40"},{"size":513,"mtime":1612387447094,"results":"49","hashOfConfig":"40"},{"size":201,"mtime":1612387695590,"results":"50","hashOfConfig":"40"},{"size":305,"mtime":1612892664710,"results":"51","hashOfConfig":"40"},{"size":3902,"mtime":1612388939367,"results":"52","hashOfConfig":"40"},{"size":6071,"mtime":1612812595658,"results":"53","hashOfConfig":"40"},{"size":255,"mtime":1612466156835,"results":"54","hashOfConfig":"40"},{"size":8215,"mtime":1612563990082,"results":"55","hashOfConfig":"40"},{"size":4927,"mtime":1612894812357,"results":"56","hashOfConfig":"40"},{"size":1530,"mtime":1612824431737,"results":"57","hashOfConfig":"40"},{"size":2464,"mtime":1612830092273,"results":"58","hashOfConfig":"40"},{"size":1277,"mtime":1612983185070,"results":"59","hashOfConfig":"60"},{"size":4204,"mtime":1613153764519,"results":"61","hashOfConfig":"60"},{"size":375,"mtime":1612982629786,"results":"62","hashOfConfig":"60"},{"size":656,"mtime":1613087014441,"results":"63","hashOfConfig":"60"},{"size":1077,"mtime":1612982629764,"results":"64","hashOfConfig":"60"},{"size":174,"mtime":1612982629783,"results":"65","hashOfConfig":"60"},{"size":213,"mtime":1613154259245,"results":"66","hashOfConfig":"60"},{"size":6287,"mtime":1613153460795,"results":"67","hashOfConfig":"60"},{"size":240,"mtime":1612982629778,"results":"68","hashOfConfig":"60"},{"size":1985,"mtime":1612982629775,"results":"69","hashOfConfig":"60"},{"size":3902,"mtime":1612982629780,"results":"70","hashOfConfig":"60"},{"size":11017,"mtime":1613158212869,"results":"71","hashOfConfig":"60"},{"size":4969,"mtime":1613087062920,"results":"72","hashOfConfig":"60"},{"size":9389,"mtime":1613157616388,"results":"73","hashOfConfig":"60"},{"size":1530,"mtime":1612982629770,"results":"74","hashOfConfig":"60"},{"size":255,"mtime":1612982629783,"results":"75","hashOfConfig":"60"},{"size":305,"mtime":1612982629785,"results":"76","hashOfConfig":"60"},{"size":513,"mtime":1612982629767,"results":"77","hashOfConfig":"60"},{"size":2464,"mtime":1612982629766,"results":"78","hashOfConfig":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"2c9557",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"81"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},"r6eaxn",{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"121"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"121"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\index.js",[],["161","162"],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\App.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\reportWebVitals.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\Routes.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Home.js",["163"],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NotFound.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\config.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Login.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\contextLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\components\\LoaderButton.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\errorLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\hooksLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Signup.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\NewPost.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\libs\\awsLib.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Posts.js",["164"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport { onError } from \"../libs/errorLib\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport config from \"../config\";\r\nimport LoaderButton from \"../components/LoaderButton\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { s3Upload } from \"../libs/awsLib\";\r\n\r\nexport default function Posts() {\r\n  const file = useRef(null);\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const [post, setPost] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  \r\n  useEffect(() => {\r\n    function loadPost() {\r\n      return API.get(\"posts\", `/posts/${id}`);\r\n    }\r\n\r\n    async function onLoad() {\r\n      try {\r\n        const post = await loadPost();\r\n        console.log(post);\r\n        const {\r\n          attachment,\r\n        } = post;\r\n\r\n        if (attachment) {\r\n          post.attachmentURL = await Storage.vault.get(attachment);\r\n        }\r\n        \r\n        setPost(post);\r\n      } catch (e) {\r\n        onError(e);\r\n      }\r\n    }\r\n    console.log(post);\r\n    onLoad();\r\n  }, [id]);\r\n\r\n\r\n  function validateForm() {\r\n    return post.length > 0;\r\n  }\r\n\r\n  function savePost(post) {\r\n    return API.put(\"posts\", `/posts/${id}`, {\r\n      body: post\r\n    });\r\n  }\r\n  function formatFilename(str) {\r\n    if (str != null) {\r\n      return str.replace(/^\\w+-/, \"\");\r\n  }\r\n  }\r\n\r\n  function handleFileChange(event) {\r\n    file.current = event.target.files[0];\r\n  }\r\n\r\n  async function handleFormSubmit(data, event) {\r\n    let attachment;\r\n    event.preventDefault();\r\n\r\n    if (file.current && file.current.size > config.MAX_ATTACHMENT_SIZE) {\r\n      alert(\r\n        `Please pick a file smaller than ${\r\n          config.MAX_ATTACHMENT_SIZE / 1000000\r\n        } MB.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      if (file.current) {\r\n        attachment = await s3Upload(file.current);\r\n      }\r\n      await savePost({\r\n        postBlurb: data.postBlurb,\r\n        postLink: data.postLink,\r\n        postLanguage: data.postLanguage,\r\n        postKeywords: data.postKeywords,\r\n        postRating: data.postRating,\r\n        attachment: attachment || post.attachment,\r\n      });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      onError(e);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  function deletePost() {\r\n    return API.del(\"posts\", `/posts/${id}`);\r\n  }\r\n\r\n  async function handleDelete(event) {\r\n    event.preventDefault();\r\n\r\n    const confirmed = window.confirm(\r\n      \"Are you sure you want to delete this note?\"\r\n    );\r\n\r\n    if (!confirmed) {\r\n      return;\r\n    }\r\n\r\n    setIsDeleting(true);\r\n\r\n    try {\r\n      await deletePost();\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      onError(e);\r\n      setIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"posts\">\r\n        (\r\n          <div>\r\n            <Card bg=\"dark\" style={{ width: \"80%\" }} className=\"p-5 NewPost\">\r\n              <div className=\"NewPost\">\r\n                <Form onSubmit={handleSubmit(handleFormSubmit)}>\r\n                  <Form.Group controlId=\"PostBlurb\">\r\n                    <Form.Label className=\"labels\">\r\n                      Describe the Content\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                    as=\"textarea\"\r\n                    onChange={(e) => setPost(e.target.value)}\r\n                    ref={register({ required: true })}\r\n                    name=\"postBlurb\"\r\n                    value={ post.postBlurb}\r\n                    />\r\n                    {errors.blurb && errors.blurb.type === \"required\" && (\r\n                      <span className=\"noto\" role=\"alert\">\r\n                        This is required\r\n                      </span>\r\n                    )}\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"PostLink\">\r\n                    <Form.Label className=\"labels\">Post Link</Form.Label>\r\n                    <Form.Control\r\n                      value={post.postLink}\r\n                      type=\"text\"\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                      ref={register({ required: true })}\r\n                      name=\"postLink\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"postLanguage\">\r\n                    <Form.Label className=\"labels\">\r\n                      What programming language?\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      value={post.postLanguage}\r\n                      type=\"text\"\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                      ref={register({ required: true })}\r\n                      name=\"postLanguage\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"postKeywords\">\r\n                    <Form.Label className=\"labels\">Any Keywords?</Form.Label>\r\n                    <Form.Control\r\n                      as=\"select\"\r\n                      multiple\r\n                      name=\"postKeywords\"\r\n                      size=\"3\"\r\n                      ref={register}\r\n                      value={post.postKeywords}\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                    >\r\n                      <option value=\"Tutorial\">Tutorial</option>\r\n                      <option value=\"Blog Post\">Blog Post</option>\r\n                      <option value=\"Youtube Video\">Youtube Video</option>\r\n                      <option value=\"Podcast\">Podcast</option>\r\n                      <option value=\"Documentation\">Documentation</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"postRating\">\r\n                    <Form.Label className=\"labels\">\r\n                      Rate it, 1 to 5 Stars.\r\n                    </Form.Label>\r\n                    <br></br>\r\n                    <Form.Control\r\n                      as=\"select\"\r\n                      id=\"rating\"\r\n                      name=\"postRating\"\r\n                      size=\"3\"\r\n                      ref={register}\r\n                      value={post.postRating}\r\n                      onChange={(e) => setPost(e.target.value)}\r\n                    >\r\n                      <option value=\"1\">1</option>\r\n                      <option value=\"2\">2</option>\r\n                      <option value=\"3\">3</option>\r\n                      <option value=\"4\">4</option>\r\n                      <option value=\"5\">5</option>\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"file\">\r\n                    <Form.Label>Attachment</Form.Label>\r\n                    {post.attachment && (\r\n                      <p>\r\n                        <a\r\n                          target=\"_blank\"\r\n                          rel=\"noopener noreferrer\"\r\n                          href={post.attachmentURL}\r\n                        >\r\n                          {formatFilename(post.attachment)}\r\n                        </a>\r\n                      </p>\r\n                    )}\r\n                    <Form.Control onChange={handleFileChange} type=\"file\" />\r\n                  </Form.Group>\r\n                  <LoaderButton\r\n                    block\r\n                    type=\"submit\"\r\n                    size=\"lg\"\r\n                    variant=\"primary\"\r\n                    isLoading={isLoading}\r\n                    disabled={!validateForm()}\r\n                  >\r\n                    Share it\r\n                  </LoaderButton>\r\n                </Form>\r\n              </div>\r\n            </Card>\r\n            <LoaderButton\r\n              size=\"lg\"\r\n              variant=\"danger\"\r\n              onClick={handleDelete}\r\n              isLoading={isDeleting}\r\n            >\r\n              Delete\r\n            </LoaderButton>\r\n          </div>\r\n        )\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\LandingPage.js",["165"],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\containers\\Donate.js",[],"C:\\Users\\alexa\\Documents\\resource_hub\\resourcehub-client\\src\\components\\BillingForm.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\index.js",[],["166","167"],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\App.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\reportWebVitals.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\config.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\Routes.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\contextLib.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\errorLib.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Home.js",["168"],"import React, { useState, useEffect } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useAppContext } from \"../libs/contextLib\";\r\nimport { onError } from \"../libs/errorLib\";\r\nimport \"./Home.css\";\r\nimport { API } from \"aws-amplify\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { BsFileEarmarkPlus } from \"react-icons/bs\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport YouTube from \"react-youtube\";\r\nimport SpotifyPlayer from \"react-spotify-player\";\r\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\r\n\r\nexport default function Home() {\r\n  function getTweetId(arg) {\r\n    let tweetId = arg.split(\"/\")[5];\r\n    return tweetId;\r\n  }\r\n  \r\n  function extractVideoID(url) {\r\n      let regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n      console.log(url);\r\n      let match = url.match(regExp);\r\n      if (match && match[7].length === 11) {\r\n        return match[7];\r\n      } else {\r\n      }\r\n  }\r\n\r\n\r\n  const playerSize = {\r\n    width: \"70%\",\r\n  };\r\n\r\n  // const file = useRef(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [allPosts, setAllPosts] = useState([]);\r\n  const { isAuthenticated } = useAppContext();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function onLoad() {\r\n      if (!isAuthenticated) {\r\n        // try {\r\n        //   const posts = await loadAllPosts();\r\n        //   setAllPosts(posts);\r\n        // } catch (e) {\r\n        //   onError(e);\r\n        // }\r\n        return;\r\n      }\r\n      try {\r\n        const posts = await loadPosts();\r\n\r\n        if (posts.attachment) {\r\n          posts.attachment = await Storage.vault.get(posts.attachment);\r\n        }\r\n\r\n        setPosts(posts);\r\n      } catch (e) {\r\n        onError(e);\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n    onLoad();\r\n  }, [isAuthenticated]);\r\n\r\n  function loadPosts() {\r\n    return API.get(\"posts\", \"/posts\");\r\n  }\r\n\r\n  // function loadAllPosts() {\r\n  //   return API.get(\"posts\", \"/posts/all\");\r\n  // }\r\n\r\n  // function formatFilename(str) {\r\n  //   return str.replace(/^\\w+-/, \"\");\r\n  // }\r\n\r\n  function renderPostsList(posts) {\r\n    return (\r\n      <div>\r\n        <LinkContainer to=\"/posts/new\">\r\n          <ListGroup.Item action className=\"py-1 text-nowrap text-truncate\">\r\n            <BsFileEarmarkPlus size={17} />\r\n            <span className=\"ml-2 font-weight-bold\">Create new post</span>\r\n          </ListGroup.Item>\r\n        </LinkContainer>\r\n        {posts.sort((a, b) => b.createdAt - a.createdAt).map(\r\n          ({\r\n            postId,\r\n            postBlurb,\r\n            postLink,\r\n            postKeywords,\r\n            postLanguage,\r\n            postRating,\r\n            attachment,\r\n            createdAt,\r\n          }) => (\r\n            <LinkContainer key={postId} to={`/posts/${postId}`}>\r\n              <ListGroup.Item action>\r\n                <span className=\"font-weight-bold\">\r\n                  {postBlurb.trim().split(\"\\n\")[0]}\r\n                  <br></br>\r\n                  <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {postLink.trim().split(\"\\n\")[0]}\r\n                  </a>\r\n                  <br></br>\r\n                </span>\r\n                <span className=\"feed-text\">\r\n                  Language: {postLanguage}\r\n                  <br></br>\r\n                  Tags:  {postKeywords.length > 0 ? postKeywords.join(\", \"):\"No tags 😢\"}\r\n                  <br></br>\r\n                  Rating:\r\n                  <br />\r\n                  <StarRatingComponent\r\n                    name={postId}\r\n                    editing={false}\r\n                    renderStarIcon={() => <span>⭐</span>}\r\n                    starCount={parseInt(postRating)}\r\n                  />\r\n                  {postLink.includes(\"youtube.com\") && (\r\n                    <em>\r\n                      <YouTube videoId={extractVideoID(postLink)}></YouTube>\r\n                    </em>\r\n                  )}\r\n                  {postLink.includes(\"open.spotify.com\") && (\r\n                    <React.Fragment>\r\n                      <br></br>\r\n                      <SpotifyPlayer\r\n                        view=\"list\"\r\n                        className=\"no-overflow\"\r\n                        theme=\"white\"\r\n                        scrolling=\"no\"\r\n                        // view ='coverart'\r\n                        size={playerSize}\r\n                        uri={postLink}\r\n                      ></SpotifyPlayer>\r\n                    </React.Fragment>\r\n                  )}\r\n                  {postLink.includes(\"twitter.com\") && (\r\n                    <TwitterTweetEmbed\r\n                      tweetId={getTweetId(postLink)}\r\n                    ></TwitterTweetEmbed>\r\n                  )}\r\n                  {/* <p>Attachment: <a target=\"_blank\" rel=\"noopener noreferrer\" href={posts.attachment}>{(attachment === 'null') ? \"No File Uploaded\":formatFilename(attachment)}</a></p> */}\r\n                </span>\r\n                <br />\r\n                <p>\r\n                  Posted at:{\" \"}\r\n                  {new Date(createdAt).toLocaleString([], {\r\n                    year: \"numeric\",\r\n                    month: \"numeric\",\r\n                    day: \"numeric\",\r\n                    hour: \"2-digit\",\r\n                    minute: \"2-digit\",\r\n                  })}\r\n                </p>\r\n              </ListGroup.Item>\r\n            </LinkContainer>\r\n          )\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderLander() {\r\n    console.log(allPosts);\r\n    return (\r\n      <div className=\"lander\">\r\n        <h1>Resource Hub</h1>\r\n        <p className=\"text-muted\">\r\n          A place to share helpful information for developers.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderPosts() {\r\n    return (\r\n      <div className=\"posts pb-5 mt-4 mb-3\">\r\n        <ListGroup>{!isLoading && renderPostsList(posts)}</ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"lander\">\r\n        <h1 className=\"font-weight-bold pb-3 mt-4 mb-3\">Your Posts</h1>\r\n        <div className=\"d-block justify-content-center\">\r\n          {isAuthenticated ? renderPosts() : renderLander()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\NotFound.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Login.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Signup.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Posts.js",["169"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { API, Storage } from \"aws-amplify\";\r\nimport { onError } from \"../libs/errorLib\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport config from \"../config\";\r\nimport LoaderButton from \"../components/LoaderButton\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { s3Upload } from \"../libs/awsLib\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport default function Posts() {\r\n  const file = useRef(null);\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const [post, setPost] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const { register, handleSubmit, errors } = useForm();\r\n\r\n  \r\n  useEffect(() => {\r\n    function loadPost() {\r\n      return API.get(\"posts\", `/posts/${id}`);\r\n    }\r\n\r\n    async function onLoad() {\r\n      try {\r\n        const post = await loadPost();\r\n        console.log(post);\r\n        const {\r\n          attachment,\r\n        } = post;\r\n\r\n        if (attachment) {\r\n          post.attachmentURL = await Storage.vault.get(attachment);\r\n        }\r\n        \r\n        setPost(post);\r\n      } catch (e) {\r\n        onError(e);\r\n      }\r\n    }\r\n    console.log(post);\r\n    onLoad();\r\n  }, [id]);\r\n\r\n\r\n  function validateForm() {\r\n    return post.length > 0;\r\n  }\r\n\r\n  function savePost(post) {\r\n    return API.put(\"posts\", `/posts/${id}`, {\r\n      body: post\r\n    });\r\n  }\r\n  function formatFilename(str) {\r\n    if (str != null) {\r\n      return str.replace(/^\\w+-/, \"\");\r\n  }\r\n  }\r\n\r\n  function handleFileChange(event) {\r\n    file.current = event.target.files[0];\r\n  }\r\n\r\n  async function handleFormSubmit(data, event) {\r\n    let attachment;\r\n    event.preventDefault();\r\n\r\n    if (file.current && file.current.size > config.MAX_ATTACHMENT_SIZE) {\r\n      alert(\r\n        `Please pick a file smaller than ${\r\n          config.MAX_ATTACHMENT_SIZE / 1000000\r\n        } MB.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      if (file.current) {\r\n        attachment = await s3Upload(file.current);\r\n      }\r\n      await savePost({\r\n        postBlurb: data.postBlurb,\r\n        postLink: data.postLink,\r\n        postLanguage: data.postLanguage,\r\n        postKeywords: data.postKeywords,\r\n        postRating: data.postRating,\r\n        attachment: attachment || post.attachment,\r\n      });\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      onError(e);\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  function deletePost() {\r\n    return API.del(\"posts\", `/posts/${id}`);\r\n  }\r\n\r\n  async function handleDelete(event) {\r\n    event.preventDefault();\r\n\r\n    const confirmed = window.confirm(\r\n      \"Are you sure you want to delete this note?\"\r\n    );\r\n\r\n    if (!confirmed) {\r\n      return;\r\n    }\r\n\r\n    setIsDeleting(true);\r\n\r\n    try {\r\n      await deletePost();\r\n      history.push(\"/\");\r\n    } catch (e) {\r\n      onError(e);\r\n      setIsDeleting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"posts\">\r\n        (\r\n        <div>\r\n          <Card bg=\"dark\" className=\"p-5 NewPost\">\r\n            <Button\r\n              className=\"font-weight-bold\"\r\n              variant=\"light\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              Back\r\n            </Button>\r\n            <div className=\"NewPost\">\r\n              <Form onSubmit={handleSubmit(handleFormSubmit)}>\r\n                <Form.Group controlId=\"PostBlurb\">\r\n                  <Form.Label className=\"labels\">\r\n                    Describe the Content\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    onChange={(e) => setPost(e.target.value)}\r\n                    ref={register({ required: true })}\r\n                    name=\"postBlurb\"\r\n                    value={post.postBlurb}\r\n                  />\r\n                  {errors.blurb && errors.blurb.type === \"required\" && (\r\n                    <span className=\"noto\" role=\"alert\">\r\n                      This is required\r\n                    </span>\r\n                  )}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"PostLink\">\r\n                  <Form.Label className=\"labels\">Post Link</Form.Label>\r\n                  <Form.Control\r\n                    value={post.postLink}\r\n                    type=\"text\"\r\n                    onChange={(e) => setPost(e.target.value)}\r\n                    ref={register({ required: true })}\r\n                    name=\"postLink\"\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"postLanguage\">\r\n                  <Form.Label className=\"labels\">\r\n                    What programming language?\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    id=\"postLanguage\"\r\n                    name=\"postLanguage\"\r\n                    size=\"3\"\r\n                    ref={register}\r\n                  >\r\n                    <option value=\"Assembly\">Assembly</option>\r\n                    <option value=\"C\">C</option>\r\n                    <option value=\"C#\">C#</option>\r\n                    <option value=\"C++\">C++</option>\r\n                    <option value=\"Clojure\">Clojure</option>\r\n                    <option value=\"Dart\">Dart</option>\r\n                    <option value=\"Elixir\">Elixir</option>\r\n                    <option value=\"Go\">Go</option>\r\n                    <option value=\"HTML/CSS\">HTML/CSS</option>\r\n                    <option value=\"Java\">Java</option>\r\n                    <option value=\"JavaScript\">JavaScript</option>\r\n                    <option value=\"Kotlin\">Kotlin</option>\r\n                    <option value=\"Objective-C\">Objective-C</option>\r\n                    <option value=\"PHP\">PHP</option>\r\n                    <option value=\"Python\">Python</option>\r\n                    <option value=\"Ruby\">Ruby</option>\r\n                    <option value=\"Rust\">Rust</option>\r\n                    <option value=\"SQL\">SQL</option>\r\n                    <option value=\"Scala\">Scala</option>\r\n                    <option value=\"Shell Scripting\">Shell Scripting</option>\r\n                    <option value=\"Swift\">Swift</option>\r\n                    <option value=\"TypeScript\">TypeScript</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"postKeywords\">\r\n                  <Form.Label className=\"labels\">\r\n                    Any Keywords? (Multiple Choice)\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    multiple\r\n                    id=\"postKeywords\"\r\n                    name=\"postKeywords\"\r\n                    size=\"3\"\r\n                    ref={register}\r\n                  >\r\n                    <option value=\"APIs\">APIs</option>\r\n                    <option value=\"AWS\">AWS</option>\r\n                    <option value=\"Angular\">Angular</option>\r\n                    <option value=\"Beginners\">Beginners</option>\r\n                    <option value=\"Blockchain\">Blockchain</option>\r\n                    <option value=\"Blog Post\">Blog Post</option>\r\n                    <option value=\"Career Advice\">Career Advice</option>\r\n                    <option value=\"Cloud\">Cloud</option>\r\n                    <option value=\"Databases\">Databases</option>\r\n                    <option value=\"Design\">Design</option>\r\n                    <option value=\"Firebase\">Firebase</option>\r\n                    <option value=\"Game Development\">Game Development</option>\r\n                    <option value=\"Gatsby\">Gatsby</option>\r\n                    <option value=\"GitHub\">GitHub</option>\r\n                    <option value=\"Leadership\">Leadership</option>\r\n                    <option value=\"Next.js\">Next.js</option>\r\n                    <option value=\"Node\">Node</option>\r\n                    <option value=\"Open Source\">Open Source</option>\r\n                    <option value=\"Podcast\">Podcast</option>\r\n                    <option value=\"Productivity\">Productivity</option>\r\n                    <option value=\"React\">React</option>\r\n                    <option value=\"Serverless\">Serverless</option>\r\n                    <option value=\"Testing\">Testing</option>\r\n                    <option value=\"UI + UX\">UI + UX</option>\r\n                    <option value=\"VS Code\">VS Code</option>\r\n                    <option value=\"Vue\">Vue</option>\r\n                    <option value=\"Women in Tech\">Women in Tech</option>\r\n                    <option value=\"YouTube Video\">YouTube Video</option>\r\n                    <option value=\"iOS Development\">iOS Development</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"postRating\">\r\n                  <Form.Label className=\"labels\">\r\n                    Rate it, 1 to 5 Stars.\r\n                  </Form.Label>\r\n                  <br></br>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    id=\"rating\"\r\n                    name=\"postRating\"\r\n                    size=\"3\"\r\n                    ref={register}\r\n                    value={post.postRating}\r\n                    onChange={(e) => setPost(e.target.value)}\r\n                  >\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                  </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"file\">\r\n                  <Form.Label>Attachment</Form.Label>\r\n                  {post.attachment && (\r\n                    <p>\r\n                      <a\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        href={post.attachmentURL}\r\n                      >\r\n                        {formatFilename(post.attachment)}\r\n                      </a>\r\n                    </p>\r\n                  )}\r\n                  <Form.Control onChange={handleFileChange} type=\"file\" />\r\n                </Form.Group>\r\n                <LoaderButton\r\n                  block\r\n                  type=\"submit\"\r\n                  size=\"lg\"\r\n                  variant=\"primary\"\r\n                  isLoading={isLoading}\r\n                  disabled={!validateForm()}\r\n                >\r\n                  Share it\r\n                </LoaderButton>\r\n              </Form>\r\n            </div>\r\n          </Card>\r\n          <LoaderButton\r\n            size=\"lg\"\r\n            variant=\"danger\"\r\n            onClick={handleDelete}\r\n            isLoading={isDeleting}\r\n          >\r\n            Delete\r\n          </LoaderButton>\r\n        </div>\r\n        )\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\LandingPage.js",["170"],"import React, { useState, useEffect } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { onError } from \"../libs/errorLib\";\r\nimport \"./Home.css\";\r\nimport { API } from \"aws-amplify\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport YouTube from \"react-youtube\";\r\nimport SpotifyPlayer from \"react-spotify-player\";\r\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\r\nimport LazyLoad from 'react-lazy-load';\r\nimport { useAppContext } from \"../libs/contextLib\";\r\n\r\n\r\nexport default function LandingPage() {\r\n  function getTweetId(arg) {\r\n    let tweetId = arg.split(\"/\")[5];\r\n    return tweetId;\r\n  }\r\n\r\n  function extractVideoID(url) {\r\n    let regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n    console.log(url);\r\n    let match = url.match(regExp);\r\n    if (match && match[7].length === 11) {\r\n      return match[7];\r\n    } else {\r\n    }\r\n  }\r\n\r\n  const playerSize = {\r\n    width: \"70%\",\r\n  };\r\n\r\n  const [allPosts, setAllPosts] = useState([]);\r\n  const { isAuthenticated } = useAppContext();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function onLoad() {\r\n      try {\r\n        const allPosts = await loadAllPosts();\r\n        setAllPosts(allPosts);\r\n      } catch (e) {\r\n        onError(e);\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n    onLoad();\r\n  }, []);\r\n\r\n  function loadAllPosts() {\r\n    return API.get(\"posts\", \"/posts/all\");\r\n  }\r\n\r\n  function renderPostsList(allPosts) {\r\n    return (\r\n      <div>\r\n        {allPosts.Items.sort((a, b) => b.createdAt - a.createdAt).map(\r\n          ({\r\n            postId,\r\n            postBlurb,\r\n            postLink,\r\n            postKeywords,\r\n            postLanguage,\r\n            postRating,\r\n            attachment,\r\n            createdAt,\r\n          }) => (\r\n            <LazyLoad offsetVertical={100}>\r\n              <ListGroup.Item key={postId}>\r\n                <span className=\"font-weight-bold\">\r\n                  {postBlurb.trim().split(\"\\n\")[0]}\r\n                  <br></br>\r\n                  <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    {postLink.trim().split(\"\\n\")[0]}\r\n                  </a>\r\n                  <br></br>\r\n                </span>\r\n                <span className=\"feed-text\">\r\n                  Language: {postLanguage}\r\n                  <br></br>\r\n                  Tags:{\" \"}\r\n                  {postKeywords.length > 1\r\n                    ? postKeywords.join(\", \")\r\n                    : \"No tags 😢\"}\r\n                  <br></br>\r\n                  Rating:\r\n                  <br />\r\n                  <StarRatingComponent\r\n                    name={postId}\r\n                    editing={false}\r\n                    renderStarIcon={() => <span>⭐</span>}\r\n                    starCount={parseInt(postRating)}\r\n                  />\r\n                  {postLink.includes(\"youtube.com\") && (\r\n                    <em>\r\n                      <YouTube videoId={extractVideoID(postLink)}></YouTube>\r\n                    </em>\r\n                  )}\r\n                  {postLink.includes(\"open.spotify.com\") && (\r\n                    <React.Fragment>\r\n                      <br></br>\r\n                      <SpotifyPlayer\r\n                        view=\"list\"\r\n                        className=\"no-overflow\"\r\n                        theme=\"white\"\r\n                        scrolling=\"no\"\r\n                        // view ='coverart'\r\n                        size={playerSize}\r\n                        uri={postLink}\r\n                      ></SpotifyPlayer>\r\n                    </React.Fragment>\r\n                  )}\r\n                  {postLink.includes(\"twitter.com\") && (\r\n                    <TwitterTweetEmbed\r\n                      tweetId={getTweetId(postLink)}\r\n                    ></TwitterTweetEmbed>\r\n                  )}\r\n                  <p>\r\n                    Posted at:{\" \"}\r\n                    {new Date(createdAt).toLocaleString([], {\r\n                      year: \"numeric\",\r\n                      month: \"numeric\",\r\n                      day: \"numeric\",\r\n                      hour: \"2-digit\",\r\n                      minute: \"2-digit\",\r\n                    })}\r\n                  </p>\r\n                  {/* <p>Attachment: <a target=\"_blank\" rel=\"noopener noreferrer\" href={attachment}/></p> */}\r\n                </span>\r\n                <br />\r\n              </ListGroup.Item>\r\n            </LazyLoad>\r\n          )\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderPosts() {\r\n    return (\r\n      <div className=\"posts\">\r\n        <ListGroup>{!isLoading && renderPostsList(allPosts)}</ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"lander\">\r\n        <h1 className=\"font-weight-bold pb-3 mt-4 mb-3\">All Posts</h1>\r\n        <div className=\"d-block justify-content-center\">{renderPosts()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\NewPost.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\containers\\Donate.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\awsLib.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\libs\\hooksLib.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\components\\LoaderButton.js",[],"C:\\Users\\alexa\\Documents\\clones\\resourcehub-client\\src\\components\\BillingForm.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":37,"column":20,"nodeType":"177","messageId":"178","endLine":37,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":46,"column":6,"nodeType":"181","endLine":46,"endColumn":10,"suggestions":"182"},{"ruleId":"175","severity":1,"message":"183","line":35,"column":11,"nodeType":"177","messageId":"178","endLine":35,"endColumn":26},{"ruleId":"171","replacedBy":"184"},{"ruleId":"173","replacedBy":"185"},{"ruleId":"175","severity":1,"message":"176","line":37,"column":20,"nodeType":"177","messageId":"178","endLine":37,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":47,"column":6,"nodeType":"181","endLine":47,"endColumn":10,"suggestions":"186"},{"ruleId":"175","severity":1,"message":"183","line":35,"column":11,"nodeType":"177","messageId":"178","endLine":35,"endColumn":26},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'setAllPosts' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'post'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'isAuthenticated' is assigned a value but never used.",["187"],["188"],["190"],"no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"191","fix":"193"},"Update the dependencies array to be: [id, post]",{"range":"194","text":"195"},{"range":"196","text":"195"},[1337,1341],"[id, post]",[1383,1387]]